parameters:
- name: sqliteYear
  displayName: Year of sqlite build
  type: number
  default: 2022
- name: sqliteVersion
  displayName: Sqlite version number
  type: number
  default: 3380500
- name: systemDataSqliteVersion
  displayName: System.Data.Sqlite version number
  type: string
  default: 1.0.116.0

variables:
  minorVersion: $[counter('minorVersion', 1)]

trigger:
  branches:
    include:
    - master

pr:
  branches:
    include:
    - master

stages:
  - stage: Setup
    displayName: Setup
    jobs:
      - job:
        displayName: Build Variables
        pool:
          vmImage: 'ubuntu-20.04'
        steps:
          # Set the build name properly.  The 'name' property won't recursively expand so hack here:
          - bash: |
              NUGETVERSION="${{ parameters.systemDataSqliteVersion}}-$MINORVERSION"
              echo "##vso[build.updatebuildnumber]$NUGETVERSION"
            displayName: Set Build Name

  - stage: Build
    dependsOn: []
    jobs:
    - job: SQLite
      strategy:
        matrix:
          linux-x64:
            osName: 'linux'
            imageName: 'ubuntu-20.04'
          osx-x64:
            osName: 'osx-x64'
            imageName: 'macos-11'
          osx-arm64:
            osName: 'osx-arm64'
            imageName: 'macos-11'
          win-x64:
             osName: 'win-x64'
             imageName: 'windows-2019'
          win-x86:
             osName: 'win-x86'
             imageName: 'windows-2019'

      pool:
        vmImage: $(imageName)
      steps:
        - checkout: self
        - bash: ./build_$(osName).sh
          env:
            YEAR: ${{ parameters.sqliteYear }}
            VERSION: ${{ parameters.sqliteVersion }}
          displayName: Build
        - publish: src
          artifact: '$(osName)_native'

    - job: SystemDataSQLite
      pool:
        vmImage: 'windows-2019'
      steps:
        - bash: ./get_system_data_sqlite.sh ${{ parameters.systemDataSqliteVersion }}
        - task: NuGetCommand@2
          inputs:
            command: 'restore'
            restoreSolution: 'net/SQLite.NET.2015.MSBuild.sln'
        - task: MSBuild@1
          displayName: .NET 4.6.1
          inputs:
            solution: 'net/SQLite.NET.2015.MSBuild.sln'
            configuration: 'ReleaseManagedOnly'
            msbuildArguments: '/t:System_Data_SQLite_2015 /p:UseInteropDll=false /p:UseSqliteStandard=true'
        - task: DotNetCoreCLI@2
          displayName: .NET Standard 2.0
          inputs:
            command: 'build'
            projects: 'net/SQLite.NET.NetStandard20.MSBuild.sln'
            arguments: '/p:Configuration=ReleaseManagedOnly /p:UseInteropDll=false /p:UseSqliteStandard=true'

        - publish: net/bin
          artifact: 'System.Data.SQLite'

  - stage: Package
    dependsOn: Build
    jobs:
    - job: Nuget
      pool:
        vmImage: 'windows-2019'
      steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: win-x64_native
          targetPath: artifact/win-x64
          itemPattern: 'sqlite3.dll'
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: win-x86_native
          targetPath: artifact/win-x86
          itemPattern: 'sqlite3.dll'
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: osx-x64_native
          targetPath: artifact/osx-x64
          itemPattern: 'libsqlite3.dylib'
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: osx-arm64_native
          targetPath: artifact/osx-arm64
          itemPattern: 'libsqlite3.dylib'
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: System.Data.SQLite
          targetPath: net/bin
      - bash: |
          NUGETVERSION="${{ parameters.systemDataSqliteVersion}}-$MINORVERSION"
          echo $NUGETVERSION
          sed -i'' -e "s/<version>[0-9.*-]\+<\/version>/<version>${NUGETVERSION}<\/version>/g" SQLite.Core.nuspec
      - task: NuGetToolInstaller@0
      - bash: |
          ls -lR
      - task: NuGetCommand@2
        inputs:
          command: 'pack'
          packagesToPack: 'SQLite.Core.nuspec'
          versioningScheme: 'off'
      - publish: $(Build.ArtifactStagingDirectory)
        artifact: NugetPackage
      - task: NuGetCommand@2
        enabled: true
        inputs:
          command: 'push'
          packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
          nuGetFeedType: 'internal'
          publishVstsFeed: '7ab38f4e-5a57-4d70-84f4-94dd9bc5d6df/f762697f-09fa-4960-89a1-64e48069bf6a'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
